qtPrintFramework

Copyright 2014 Lloyd Konneker

Released under license GPLv3


This is a framework that encapsulates the Qt print architecture.  Also a small app that demos the framework.
It hides some of Qt's lingering differences across platforms.  It now requires Qt5.3.

It is useful for:
- a working component of an app
- understanding the Qt print architecture.
- testing Qt print on different platforms that Qt supports.


When to use this framework
--------------------------

- you want a component with a simple API, that can mask Qt bugs and changes
- you want PageSetup for non-native printers (PDF)
- you want Print PDF for Win platform (TODO)
- you want user to be able to choose a page (page setup) but the platform/toolchain has no support for printers


QtPrintSupport module and mobile platforms
------------------------------------------

As of this writing, Qt does not compile QtPrintSupport module for mobile platforms (iOS and Android.)
While those platforms may provide native support for printing (?) Qt doesn't yet adapt the native support.
(The alternative is to save to the cloud, or email, a document, and print it from another platform?)
Yet your app may want to offer a PageSetup dialog, for example to display a page.
You can still use this framework but you must not import the following modules which import QtPrintSupport:
- converser.printered
- pageSetup.printeredPageSetup
- printer
Also, your app should not call the Print dialogs.

Another way of discussing this is: is printing to PDF really printing, or just saving?
Why on some platforms do you need a Print dialog to save PDF, isn't that just exporting?
Shouldn't the notion of pagination be separate from printing? (PDF is paginated.)


Discussion
----------

The use case is a user wants to send content to a printer or PDF file.  
These are both Painters, and both PaginatedPainters.
(A user may also want to send content (save or email) without pagination, and free the viewer to paginate it.)

The app needs to have a dialog with the user about pagination (page setup.)
When the destination is a real printer, the real printer constrains the dialog
(to the hw limitations of the printer, and the changeable, temporary status of the paper supply.)
When the destination is a PDF file, there are no constraints (PDF is unlimited re page setup.)

The app should know the proper dialog under conditions:
- platform (QPrintSupport implemented or not.)
- a real printer is configured and powered
- user has chosen a different real printer or to print to PDF

Qt's model and implementation (circa 5.3.2) is not quite right.
- on some platforms, you can't send to a PDF file unless a real printer exists.
- on mobile platforms, there is no implementation yet

Qt 5.3 is vastly improved in this area, but still not complete.


Status of Page Setup bugs
-------------------------

This section is about whether a page setup dialog is effective (affects what print dialog shows when it opens.)  

As far as I know, as of the time of this writing:

Not work on Ubuntu 13.10 and Qt 5.0.2 (neither the framework's page setup nor the native page setup dialog affects print dialog
when the printer is native. The native page setup dialog is a garbled, small dialog because of QTBUG TODO that was fixed in Qt 5.2)

Using native page setup not work on: (Ubuntu 14.04, Qt 5.2.1) or (OSX 10.7.5, Qt 5.3)
but using a non-native page setup dialog (even on native printers) does.

Bottom line: if your app doesn't need page setup, don't use it.


Contributes
-----------

 Hides these warts:
- Qt's QPrintDialog and QPageSetupDialog cannot be used for non-native printer, some platforms
- the Win platform has no native support for printing PDF
- native print dialog lets user specify an invalid Custom paper (too small to print.)
- Qt versions before 5.3 return wrong PaperSize on OSX Bug TODO: document the bug

These warts are not necessarily the fault of Qt:
it is difficult to adapt the print architectures of diverse platforms.

This framework also emits print-related signals (unlike Qt.)

This framework does NOT let user specify Custom paper for PDF.
(Qt is still too buggy for that.)
The native print dialog of Qt, in some versions, shows that:
when user chooses Custom for a PDF printer, the height and width boxes are disabled
and the dialog returns an empty page size.

 
GUI considerations for PageSetup
--------------------------------

Having a PageSetup action (separate from a Print action) is discouraged by some designers.
(For example, the Apple HIG discourages it.)
So if you don't want PageSetup action, you might not need this framework.
But you might use this framework without using its PageSetup features.

Yet some users want the flexibility to PageSetup before Print.
Many apps may show a page (not just at print time.)  
A user may want to configure the page before printing.
If a Print dialog does not let you apply page changes without printing (does Qt?)
then users are forced to print (to trash) just to change page attributes.


Custom paper
------------

Custom paper is rarely used, so it is low priority.

Custom paper seems to be a source of many bugs in Qt,
and is one of those 80/20% things: most of the effort for little benefit.

A paperless printer, since it is all algorithm, could print any paper size you could dream of.
But there is little benefit of offering that choice:
since the paperless document is scaleable, users can view it at any size.
There is no point in referencing a document to a custom paper size that other viewers don't understand.
Would the hope be that a viewing user has that real, custom paper?

OTH, some sizes such as 640x480 are an informal standard (for a size that looks good on the web.)
But again, since PDF is scaleable, specifying such a size might only save the user one step: scaling the view.

Does a printer device remember a choice of a range of custom paper sizes?
Some printer devices fail to offer a choice of Custom.

It seems like there is a bug in certain versions of Qt for setting a custom paper on a QPrinter.

This framework:
  - uses QPrintDialog, which does allow a custom paper size on PDF printer
  - uses QPageSetupDialog on native printers (real printers, not PDF), which depending on the real printer
    does allow a choice of custom paper
  - for PDF, uses a framework provided non-native page setup dialog, which does not allow you to choose Custom paper
    (because of seeming bugs in setting the choice on PrinterAdaptor.  See PageSetup.toPrinterAdaptor.)
So a user can use a Custom paper on real printers and PDF printers,
but cannot use the non-native Page Setup dialog to specify a Custom paper (only the Print dialog.)



Attributes of this framework
----------------------------
- simple API: create a PrintConverser, connect its signals, and call a few methods on it.
- use cases work on all platforms
- i18n


Use cases (GUI test sequences)
------------------------------

- print to PDF file on all platforms
	- OSX: Implemented by OSX
	- Linux: Implemented by Qt inside QPrintDialog
	- Win: Implemented by this framework, using Qt modules TODO
- PageSetup if no physical print device on system ( Paperless printer only.)
- remembers current printer (may be Paperless printer: PDF or XPS) ???
- remembers PageSetup of current printer if Paperless
- PageSetup is a setting of the app, and is applied on app startup to Paperless printer only (???)
- PageSetup is functional even on a mobile device (with no OS support for printing via dialogs)
  (OS may support 'Sharing' to a printer via a file.)
- PageSetup can use QML implementation even on a desktop platform


TODO explain this: I inconsistently call a NonNative printer a Paperless printer, meaning only 'no cellulose'
Qt's notion of a NonNative printer is: native platform has no interaction with printer (typically PDF on Win)
OR some Qt dialog (typically QPageSetupDialog on Linux) refuse to work with it.
A NonNative printer is typically cellulose free, but has pages and pagination (PDF.)
But some native printers (i.e. Win XPS) are also cellulose free.


QML
---
Using a QML user interface is a configurable option.  See config.py.  
Formerly, the user interface was only QWidget based.

If using QML, only the non-native Page Setup dialog is implemented.  
The other dialogs (Print and native Page Setup) are native,
i.e. implemented by the OS (via Qt.)

If QML is used, this project (package) depends on the qtEmbeddedQmlFramework.

If QML is used, copy this projects directory resources/qml/print to your app's resources/qml.



